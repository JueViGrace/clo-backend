// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const adminGetOrderByCode = `-- name: AdminGetOrderByCode :one
select id, kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at, deleted_at
from ke_opti
where kti_ndoc = ?
`

func (q *Queries) AdminGetOrderByCode(ctx context.Context, ktiNdoc string) (KeOpti, error) {
	row := q.db.QueryRowContext(ctx, adminGetOrderByCode, ktiNdoc)
	var i KeOpti
	err := row.Scan(
		&i.ID,
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const adminGetOrderById = `-- name: AdminGetOrderById :one
select id, kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at, deleted_at
from ke_opti
where id = ?
`

func (q *Queries) AdminGetOrderById(ctx context.Context, id string) (KeOpti, error) {
	row := q.db.QueryRowContext(ctx, adminGetOrderById, id)
	var i KeOpti
	err := row.Scan(
		&i.ID,
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const adminGetOrderLinesByCode = `-- name: AdminGetOrderLinesByCode :one
select id, ke_opti.kti_ndoc, ke_opti.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, ke_opti.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, ke_opti.created_at, ke_opti.updated_at, ke_opti.deleted_at, pedido_id, articulo_id, ke_opmv.kti_tdoc, ke_opmv.kti_ndoc, ke_opmv.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, ke_opmv.created_at, ke_opmv.updated_at, ke_opmv.deleted_at
from ke_opti
left join ke_opmv on ke_opti.id = ke_opmv.pedido_id
where ke_opti.kti_ndoc = ?
`

type AdminGetOrderLinesByCodeRow struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	PedidoID       sql.NullString
	ArticuloID     sql.NullString
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullString
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt32
	KmvArtprec     sql.NullString
	KmvStot        sql.NullString
	KmvDctolin     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) AdminGetOrderLinesByCode(ctx context.Context, ktiNdoc string) (AdminGetOrderLinesByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, adminGetOrderLinesByCode, ktiNdoc)
	var i AdminGetOrderLinesByCodeRow
	err := row.Scan(
		&i.ID,
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PedidoID,
		&i.ArticuloID,
		&i.KtiTdoc_2,
		&i.KtiNdoc_2,
		&i.KtiTipprec_2,
		&i.KmvCodart,
		&i.KmvNombre,
		&i.KmvCant,
		&i.KmvArtprec,
		&i.KmvStot,
		&i.KmvDctolin,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const adminGetOrderWithLinesById = `-- name: AdminGetOrderWithLinesById :one
select id, ke_opti.kti_ndoc, ke_opti.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, ke_opti.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, ke_opti.created_at, ke_opti.updated_at, ke_opti.deleted_at, pedido_id, articulo_id, ke_opmv.kti_tdoc, ke_opmv.kti_ndoc, ke_opmv.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, ke_opmv.created_at, ke_opmv.updated_at, ke_opmv.deleted_at
from ke_opti
left join ke_opmv on ke_opti.id = ke_opmv.pedido_id
where ke_opti.id = ?
`

type AdminGetOrderWithLinesByIdRow struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	PedidoID       sql.NullString
	ArticuloID     sql.NullString
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullString
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt32
	KmvArtprec     sql.NullString
	KmvStot        sql.NullString
	KmvDctolin     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) AdminGetOrderWithLinesById(ctx context.Context, id string) (AdminGetOrderWithLinesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, adminGetOrderWithLinesById, id)
	var i AdminGetOrderWithLinesByIdRow
	err := row.Scan(
		&i.ID,
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PedidoID,
		&i.ArticuloID,
		&i.KtiTdoc_2,
		&i.KtiNdoc_2,
		&i.KtiTipprec_2,
		&i.KmvCodart,
		&i.KmvNombre,
		&i.KmvCant,
		&i.KmvArtprec,
		&i.KmvStot,
		&i.KmvDctolin,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const adminGetOrders = `-- name: AdminGetOrders :many
select id, kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at, deleted_at
from ke_opti
`

func (q *Queries) AdminGetOrders(ctx context.Context) ([]KeOpti, error) {
	rows, err := q.db.QueryContext(ctx, adminGetOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeOpti
	for rows.Next() {
		var i KeOpti
		if err := rows.Scan(
			&i.ID,
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminGetOrdersWithLines = `-- name: AdminGetOrdersWithLines :many
select id, ke_opti.kti_ndoc, ke_opti.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, ke_opti.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, ke_opti.created_at, ke_opti.updated_at, ke_opti.deleted_at, pedido_id, articulo_id, ke_opmv.kti_tdoc, ke_opmv.kti_ndoc, ke_opmv.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, ke_opmv.created_at, ke_opmv.updated_at, ke_opmv.deleted_at
from ke_opti
left join ke_opmv on ke_opti.id = ke_opmv.pedido_id
`

type AdminGetOrdersWithLinesRow struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	PedidoID       sql.NullString
	ArticuloID     sql.NullString
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullString
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt32
	KmvArtprec     sql.NullString
	KmvStot        sql.NullString
	KmvDctolin     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) AdminGetOrdersWithLines(ctx context.Context) ([]AdminGetOrdersWithLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, adminGetOrdersWithLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminGetOrdersWithLinesRow
	for rows.Next() {
		var i AdminGetOrdersWithLinesRow
		if err := rows.Scan(
			&i.ID,
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PedidoID,
			&i.ArticuloID,
			&i.KtiTdoc_2,
			&i.KtiNdoc_2,
			&i.KtiTipprec_2,
			&i.KmvCodart,
			&i.KmvNombre,
			&i.KmvCant,
			&i.KmvArtprec,
			&i.KmvStot,
			&i.KmvDctolin,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByCode = `-- name: GetOrderByCode :one
select id, kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at, deleted_at
from ke_opti
where kti_ndoc = ? and deleted_at is null
`

func (q *Queries) GetOrderByCode(ctx context.Context, ktiNdoc string) (KeOpti, error) {
	row := q.db.QueryRowContext(ctx, getOrderByCode, ktiNdoc)
	var i KeOpti
	err := row.Scan(
		&i.ID,
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrderById = `-- name: GetOrderById :one
select id, kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at, deleted_at
from ke_opti
where id = ? and deleted_at is null
`

func (q *Queries) GetOrderById(ctx context.Context, id string) (KeOpti, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i KeOpti
	err := row.Scan(
		&i.ID,
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrderWithLinesByCode = `-- name: GetOrderWithLinesByCode :one
select id, ke_opti.kti_ndoc, ke_opti.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, ke_opti.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, ke_opti.created_at, ke_opti.updated_at, ke_opti.deleted_at, pedido_id, articulo_id, ke_opmv.kti_tdoc, ke_opmv.kti_ndoc, ke_opmv.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, ke_opmv.created_at, ke_opmv.updated_at, ke_opmv.deleted_at
from ke_opti
left join ke_opmv on ke_opti.id = ke_opmv.pedido_id
where ke_opti.kti_ndoc = ? and deleted_at is null
`

type GetOrderWithLinesByCodeRow struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	PedidoID       sql.NullString
	ArticuloID     sql.NullString
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullString
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt32
	KmvArtprec     sql.NullString
	KmvStot        sql.NullString
	KmvDctolin     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) GetOrderWithLinesByCode(ctx context.Context, ktiNdoc string) (GetOrderWithLinesByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderWithLinesByCode, ktiNdoc)
	var i GetOrderWithLinesByCodeRow
	err := row.Scan(
		&i.ID,
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PedidoID,
		&i.ArticuloID,
		&i.KtiTdoc_2,
		&i.KtiNdoc_2,
		&i.KtiTipprec_2,
		&i.KmvCodart,
		&i.KmvNombre,
		&i.KmvCant,
		&i.KmvArtprec,
		&i.KmvStot,
		&i.KmvDctolin,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const getOrderWithLinesById = `-- name: GetOrderWithLinesById :one
select id, ke_opti.kti_ndoc, ke_opti.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, ke_opti.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, ke_opti.created_at, ke_opti.updated_at, ke_opti.deleted_at, pedido_id, articulo_id, ke_opmv.kti_tdoc, ke_opmv.kti_ndoc, ke_opmv.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, ke_opmv.created_at, ke_opmv.updated_at, ke_opmv.deleted_at
from ke_opti
left join ke_opmv on ke_opti.id = ke_opmv.pedido_id
where ke_opti.id = ? and deleted_at is null
`

type GetOrderWithLinesByIdRow struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	PedidoID       sql.NullString
	ArticuloID     sql.NullString
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullString
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt32
	KmvArtprec     sql.NullString
	KmvStot        sql.NullString
	KmvDctolin     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) GetOrderWithLinesById(ctx context.Context, id string) (GetOrderWithLinesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderWithLinesById, id)
	var i GetOrderWithLinesByIdRow
	err := row.Scan(
		&i.ID,
		&i.KtiNdoc,
		&i.KtiTdoc,
		&i.KtiCodcli,
		&i.KtiNombrecli,
		&i.KtiCodven,
		&i.KtiDocsol,
		&i.KtiCondicion,
		&i.KtiTipprec,
		&i.KtiTotneto,
		&i.KtiStatus,
		&i.KtiNroped,
		&i.KtiFchdoc,
		&i.KtiNegesp,
		&i.KePedstatus,
		&i.Dolarflete,
		&i.Complemento,
		&i.NroComplemento,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PedidoID,
		&i.ArticuloID,
		&i.KtiTdoc_2,
		&i.KtiNdoc_2,
		&i.KtiTipprec_2,
		&i.KmvCodart,
		&i.KmvNombre,
		&i.KmvCant,
		&i.KmvArtprec,
		&i.KmvStot,
		&i.KmvDctolin,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const getOrdersByManager = `-- name: GetOrdersByManager :many
select ke_opti.id, kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, ke_opti.created_at, ke_opti.updated_at, ke_opti.deleted_at, vendedor.id, codigo, nombre, telefono_1, telefono_2, telefono_movil, status, supervpor, sector, subcodigo, email, vendedor.created_at, vendedor.updated_at, vendedor.deleted_at
from ke_opti
left join vendedor on ke_opti.kti_codven = vendedor.codigo
where
    vendedor.supervpor in (select kng_codcoord from ke_nivgcia where kng_codgcia = ?)
    and deleted_at is null
`

type GetOrdersByManagerRow struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	ID_2           sql.NullString
	Codigo         sql.NullString
	Nombre         sql.NullString
	Telefono1      sql.NullString
	Telefono2      sql.NullString
	TelefonoMovil  sql.NullString
	Status         sql.NullInt16
	Supervpor      sql.NullString
	Sector         sql.NullInt32
	Subcodigo      sql.NullInt32
	Email          sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) GetOrdersByManager(ctx context.Context, kngCodgcia string) ([]GetOrdersByManagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersByManagerRow
	for rows.Next() {
		var i GetOrdersByManagerRow
		if err := rows.Scan(
			&i.ID,
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.Codigo,
			&i.Nombre,
			&i.Telefono1,
			&i.Telefono2,
			&i.TelefonoMovil,
			&i.Status,
			&i.Supervpor,
			&i.Sector,
			&i.Subcodigo,
			&i.Email,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersBySalesman = `-- name: GetOrdersBySalesman :many
select id, kti_ndoc, kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, created_at, updated_at, deleted_at
from ke_opti
where kti_codven = ? and deleted_at is null
`

func (q *Queries) GetOrdersBySalesman(ctx context.Context, ktiCodven string) ([]KeOpti, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersBySalesman, ktiCodven)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeOpti
	for rows.Next() {
		var i KeOpti
		if err := rows.Scan(
			&i.ID,
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersWithLinesByManager = `-- name: GetOrdersWithLinesByManager :many
select ke_opti.id, ke_opti.kti_ndoc, ke_opti.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, ke_opti.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, ke_opti.created_at, ke_opti.updated_at, ke_opti.deleted_at, pedido_id, articulo_id, ke_opmv.kti_tdoc, ke_opmv.kti_ndoc, ke_opmv.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, ke_opmv.created_at, ke_opmv.updated_at, ke_opmv.deleted_at, vendedor.id, codigo, nombre, telefono_1, telefono_2, telefono_movil, status, supervpor, sector, subcodigo, email, vendedor.created_at, vendedor.updated_at, vendedor.deleted_at
from ke_opti
left join ke_opmv on ke_opti.id = ke_opmv.pedido_id
left join vendedor on ke_opti.kti_codven = vendedor.codigo
where
    vendedor.supervpor in (select kng_codcoord from ke_nivgcia where kng_codgcia = ?)
    and deleted_at is null
`

type GetOrdersWithLinesByManagerRow struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	PedidoID       sql.NullString
	ArticuloID     sql.NullString
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullString
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt32
	KmvArtprec     sql.NullString
	KmvStot        sql.NullString
	KmvDctolin     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
	ID_2           sql.NullString
	Codigo         sql.NullString
	Nombre         sql.NullString
	Telefono1      sql.NullString
	Telefono2      sql.NullString
	TelefonoMovil  sql.NullString
	Status         sql.NullInt16
	Supervpor      sql.NullString
	Sector         sql.NullInt32
	Subcodigo      sql.NullInt32
	Email          sql.NullString
	CreatedAt_3    sql.NullTime
	UpdatedAt_3    sql.NullTime
	DeletedAt_3    sql.NullTime
}

func (q *Queries) GetOrdersWithLinesByManager(ctx context.Context, kngCodgcia string) ([]GetOrdersWithLinesByManagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersWithLinesByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersWithLinesByManagerRow
	for rows.Next() {
		var i GetOrdersWithLinesByManagerRow
		if err := rows.Scan(
			&i.ID,
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PedidoID,
			&i.ArticuloID,
			&i.KtiTdoc_2,
			&i.KtiNdoc_2,
			&i.KtiTipprec_2,
			&i.KmvCodart,
			&i.KmvNombre,
			&i.KmvCant,
			&i.KmvArtprec,
			&i.KmvStot,
			&i.KmvDctolin,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
			&i.ID_2,
			&i.Codigo,
			&i.Nombre,
			&i.Telefono1,
			&i.Telefono2,
			&i.TelefonoMovil,
			&i.Status,
			&i.Supervpor,
			&i.Sector,
			&i.Subcodigo,
			&i.Email,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.DeletedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersWithLinesBySalesman = `-- name: GetOrdersWithLinesBySalesman :many
select id, ke_opti.kti_ndoc, ke_opti.kti_tdoc, kti_codcli, kti_nombrecli, kti_codven, kti_docsol, kti_condicion, ke_opti.kti_tipprec, kti_totneto, kti_status, kti_nroped, kti_fchdoc, kti_negesp, ke_pedstatus, dolarflete, complemento, nro_complemento, ke_opti.created_at, ke_opti.updated_at, ke_opti.deleted_at, pedido_id, articulo_id, ke_opmv.kti_tdoc, ke_opmv.kti_ndoc, ke_opmv.kti_tipprec, kmv_codart, kmv_nombre, kmv_cant, kmv_artprec, kmv_stot, kmv_dctolin, ke_opmv.created_at, ke_opmv.updated_at, ke_opmv.deleted_at
from ke_opti
left join ke_opmv on ke_opti.id = ke_opmv.pedido_id
where kti_codven = ? and deleted_at is null
`

type GetOrdersWithLinesBySalesmanRow struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	PedidoID       sql.NullString
	ArticuloID     sql.NullString
	KtiTdoc_2      sql.NullString
	KtiNdoc_2      sql.NullString
	KtiTipprec_2   sql.NullString
	KmvCodart      sql.NullString
	KmvNombre      sql.NullString
	KmvCant        sql.NullInt32
	KmvArtprec     sql.NullString
	KmvStot        sql.NullString
	KmvDctolin     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) GetOrdersWithLinesBySalesman(ctx context.Context, ktiCodven string) ([]GetOrdersWithLinesBySalesmanRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersWithLinesBySalesman, ktiCodven)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersWithLinesBySalesmanRow
	for rows.Next() {
		var i GetOrdersWithLinesBySalesmanRow
		if err := rows.Scan(
			&i.ID,
			&i.KtiNdoc,
			&i.KtiTdoc,
			&i.KtiCodcli,
			&i.KtiNombrecli,
			&i.KtiCodven,
			&i.KtiDocsol,
			&i.KtiCondicion,
			&i.KtiTipprec,
			&i.KtiTotneto,
			&i.KtiStatus,
			&i.KtiNroped,
			&i.KtiFchdoc,
			&i.KtiNegesp,
			&i.KePedstatus,
			&i.Dolarflete,
			&i.Complemento,
			&i.NroComplemento,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PedidoID,
			&i.ArticuloID,
			&i.KtiTdoc_2,
			&i.KtiNdoc_2,
			&i.KtiTipprec_2,
			&i.KmvCodart,
			&i.KmvNombre,
			&i.KmvCant,
			&i.KmvArtprec,
			&i.KmvStot,
			&i.KmvDctolin,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const inserOrder = `-- name: InserOrder :exec
insert into ke_opti (
id,
kti_ndoc,
kti_tdoc,
kti_codcli,
kti_nombrecli,
kti_codven,
kti_docsol,
kti_condicion,
kti_tipprec,
kti_totneto,
kti_status,
kti_nroped,
kti_fchdoc,
kti_negesp,
ke_pedstatus,
dolarflete,
complemento,
nro_complemento,
created_at,
updated_at
)
values(
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW()
)
`

type InserOrderParams struct {
	ID             string
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
}

func (q *Queries) InserOrder(ctx context.Context, arg InserOrderParams) error {
	_, err := q.db.ExecContext(ctx, inserOrder,
		arg.ID,
		arg.KtiNdoc,
		arg.KtiTdoc,
		arg.KtiCodcli,
		arg.KtiNombrecli,
		arg.KtiCodven,
		arg.KtiDocsol,
		arg.KtiCondicion,
		arg.KtiTipprec,
		arg.KtiTotneto,
		arg.KtiStatus,
		arg.KtiNroped,
		arg.KtiFchdoc,
		arg.KtiNegesp,
		arg.KePedstatus,
		arg.Dolarflete,
		arg.Complemento,
		arg.NroComplemento,
	)
	return err
}

const insertOrderLines = `-- name: InsertOrderLines :exec
insert into ke_opmv (
    pedido_id,
    articulo_id,
    kti_tdoc,
    kti_ndoc,
    kti_tipprec,
    kmv_codart,
    kmv_nombre,
    kmv_cant,
    kmv_artprec,
    kmv_stot,
    kmv_dctolin,
    created_at,
    updated_at
)
values (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW()
)
`

type InsertOrderLinesParams struct {
	PedidoID   string
	ArticuloID string
	KtiTdoc    string
	KtiNdoc    string
	KtiTipprec string
	KmvCodart  string
	KmvNombre  string
	KmvCant    int32
	KmvArtprec string
	KmvStot    string
	KmvDctolin string
}

func (q *Queries) InsertOrderLines(ctx context.Context, arg InsertOrderLinesParams) error {
	_, err := q.db.ExecContext(ctx, insertOrderLines,
		arg.PedidoID,
		arg.ArticuloID,
		arg.KtiTdoc,
		arg.KtiNdoc,
		arg.KtiTipprec,
		arg.KmvCodart,
		arg.KmvNombre,
		arg.KmvCant,
		arg.KmvArtprec,
		arg.KmvStot,
		arg.KmvDctolin,
	)
	return err
}

const softDeleteOrder = `-- name: SoftDeleteOrder :exec
update ke_opmv
set deleted_at = NOW()
where pedido_id = ?
`

func (q *Queries) SoftDeleteOrder(ctx context.Context, pedidoID string) error {
	_, err := q.db.ExecContext(ctx, softDeleteOrder, pedidoID)
	return err
}

const softDeleteOrderLines = `-- name: SoftDeleteOrderLines :exec
update ke_opmv
set deleted_at = NOW()
where pedido_id = ?
`

func (q *Queries) SoftDeleteOrderLines(ctx context.Context, pedidoID string) error {
	_, err := q.db.ExecContext(ctx, softDeleteOrderLines, pedidoID)
	return err
}

const updateOrder = `-- name: UpdateOrder :exec
update ke_opti
set kti_ndoc = ?,
    kti_tdoc = ?,
    kti_codcli = ?,
    kti_nombrecli = ?,
    kti_codven = ?,
    kti_docsol = ?,
    kti_condicion = ?,
    kti_tipprec = ?,
    kti_totneto = ?,
    kti_status = ?,
    kti_nroped = ?,
    kti_fchdoc = ?,
    kti_negesp = ?,
    ke_pedstatus = ?,
    dolarflete = ?,
    complemento = ?,
    nro_complemento = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateOrderParams struct {
	KtiNdoc        string
	KtiTdoc        string
	KtiCodcli      string
	KtiNombrecli   string
	KtiCodven      string
	KtiDocsol      string
	KtiCondicion   string
	KtiTipprec     string
	KtiTotneto     string
	KtiStatus      string
	KtiNroped      string
	KtiFchdoc      time.Time
	KtiNegesp      bool
	KePedstatus    string
	Dolarflete     bool
	Complemento    bool
	NroComplemento string
	ID             string
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder,
		arg.KtiNdoc,
		arg.KtiTdoc,
		arg.KtiCodcli,
		arg.KtiNombrecli,
		arg.KtiCodven,
		arg.KtiDocsol,
		arg.KtiCondicion,
		arg.KtiTipprec,
		arg.KtiTotneto,
		arg.KtiStatus,
		arg.KtiNroped,
		arg.KtiFchdoc,
		arg.KtiNegesp,
		arg.KePedstatus,
		arg.Dolarflete,
		arg.Complemento,
		arg.NroComplemento,
		arg.ID,
	)
	return err
}

const updateOrderLines = `-- name: UpdateOrderLines :exec
update ke_opmv
set kti_tdoc = ?,
    kti_ndoc = ?,
    kti_tipprec = ?,
    kmv_codart = ?,
    kmv_nombre = ?,
    kmv_cant = ?,
    kmv_artprec = ?,
    kmv_stot = ?,
    kmv_dctolin = ?,
    updated_at = NOW()
WHERE pedido_id = ?
`

type UpdateOrderLinesParams struct {
	KtiTdoc    string
	KtiNdoc    string
	KtiTipprec string
	KmvCodart  string
	KmvNombre  string
	KmvCant    int32
	KmvArtprec string
	KmvStot    string
	KmvDctolin string
	PedidoID   string
}

func (q *Queries) UpdateOrderLines(ctx context.Context, arg UpdateOrderLinesParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderLines,
		arg.KtiTdoc,
		arg.KtiNdoc,
		arg.KtiTipprec,
		arg.KmvCodart,
		arg.KmvNombre,
		arg.KmvCant,
		arg.KmvArtprec,
		arg.KmvStot,
		arg.KmvDctolin,
		arg.PedidoID,
	)
	return err
}
