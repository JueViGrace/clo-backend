// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: statistics.sql

package db

import (
	"context"
	"time"
)

const adminGetStatistics = `-- name: AdminGetStatistics :many
select id, codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at, deleted_at
from ke_estadc01
`

func (q *Queries) AdminGetStatistics(ctx context.Context) ([]KeEstadc01, error) {
	rows, err := q.db.QueryContext(ctx, adminGetStatistics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeEstadc01
	for rows.Next() {
		var i KeEstadc01
		if err := rows.Scan(
			&i.ID,
			&i.Codcoord,
			&i.Nomcoord,
			&i.Vendedor,
			&i.Nombrevend,
			&i.Cntpedidos,
			&i.Mtopedidos,
			&i.Cntfacturas,
			&i.Mtofacturas,
			&i.Metavend,
			&i.Prcmeta,
			&i.Cntclientes,
			&i.Clivisit,
			&i.Prcvisitas,
			&i.LomMontovtas,
			&i.LomPrcvtas,
			&i.LomPrcvisit,
			&i.RlomMontovtas,
			&i.RlomPrcvtas,
			&i.RlomPrcvisit,
			&i.FechaEstad,
			&i.PpgdolTotneto,
			&i.DevdolTotneto,
			&i.DefdolTotneto,
			&i.Totdolcob,
			&i.Cntrecl,
			&i.Mtorecl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminGetStatisticsById = `-- name: AdminGetStatisticsById :many
select id, codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at, deleted_at
from ke_estadc01
where id = ?
`

func (q *Queries) AdminGetStatisticsById(ctx context.Context, id string) ([]KeEstadc01, error) {
	rows, err := q.db.QueryContext(ctx, adminGetStatisticsById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeEstadc01
	for rows.Next() {
		var i KeEstadc01
		if err := rows.Scan(
			&i.ID,
			&i.Codcoord,
			&i.Nomcoord,
			&i.Vendedor,
			&i.Nombrevend,
			&i.Cntpedidos,
			&i.Mtopedidos,
			&i.Cntfacturas,
			&i.Mtofacturas,
			&i.Metavend,
			&i.Prcmeta,
			&i.Cntclientes,
			&i.Clivisit,
			&i.Prcvisitas,
			&i.LomMontovtas,
			&i.LomPrcvtas,
			&i.LomPrcvisit,
			&i.RlomMontovtas,
			&i.RlomPrcvtas,
			&i.RlomPrcvisit,
			&i.FechaEstad,
			&i.PpgdolTotneto,
			&i.DevdolTotneto,
			&i.DefdolTotneto,
			&i.Totdolcob,
			&i.Cntrecl,
			&i.Mtorecl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminGetStatisticsBySaleman = `-- name: AdminGetStatisticsBySaleman :many
select id, codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at, deleted_at
from ke_estadc01
where vendedor = ?
`

func (q *Queries) AdminGetStatisticsBySaleman(ctx context.Context, vendedor string) ([]KeEstadc01, error) {
	rows, err := q.db.QueryContext(ctx, adminGetStatisticsBySaleman, vendedor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeEstadc01
	for rows.Next() {
		var i KeEstadc01
		if err := rows.Scan(
			&i.ID,
			&i.Codcoord,
			&i.Nomcoord,
			&i.Vendedor,
			&i.Nombrevend,
			&i.Cntpedidos,
			&i.Mtopedidos,
			&i.Cntfacturas,
			&i.Mtofacturas,
			&i.Metavend,
			&i.Prcmeta,
			&i.Cntclientes,
			&i.Clivisit,
			&i.Prcvisitas,
			&i.LomMontovtas,
			&i.LomPrcvtas,
			&i.LomPrcvisit,
			&i.RlomMontovtas,
			&i.RlomPrcvtas,
			&i.RlomPrcvisit,
			&i.FechaEstad,
			&i.PpgdolTotneto,
			&i.DevdolTotneto,
			&i.DefdolTotneto,
			&i.Totdolcob,
			&i.Cntrecl,
			&i.Mtorecl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createStatistic = `-- name: CreateStatistic :exec
insert into ke_estadc01(
    id,
    codcoord,
    nomcoord,
    vendedor,
    nombrevend,
    cntpedidos,
    mtopedidos,
    cntfacturas,
    mtofacturas,
    metavend,
    prcmeta,
    cntclientes,
    clivisit,
    prcvisitas,
    lom_montovtas,
    lom_prcvtas,
    lom_prcvisit,
    rlom_montovtas,
    rlom_prcvtas,
    rlom_prcvisit,
    fecha_estad,
    ppgdol_totneto,
    devdol_totneto,
    defdol_totneto,
    totdolcob,
    cntrecl,
    mtorecl,
    created_at,
    updated_at
)
values (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW()
)
`

type CreateStatisticParams struct {
	ID            string
	Codcoord      string
	Nomcoord      string
	Vendedor      string
	Nombrevend    string
	Cntpedidos    int32
	Mtopedidos    string
	Cntfacturas   int32
	Mtofacturas   string
	Metavend      string
	Prcmeta       string
	Cntclientes   int32
	Clivisit      int32
	Prcvisitas    string
	LomMontovtas  string
	LomPrcvtas    string
	LomPrcvisit   string
	RlomMontovtas string
	RlomPrcvtas   string
	RlomPrcvisit  string
	FechaEstad    time.Time
	PpgdolTotneto string
	DevdolTotneto string
	DefdolTotneto string
	Totdolcob     string
	Cntrecl       string
	Mtorecl       string
}

func (q *Queries) CreateStatistic(ctx context.Context, arg CreateStatisticParams) error {
	_, err := q.db.ExecContext(ctx, createStatistic,
		arg.ID,
		arg.Codcoord,
		arg.Nomcoord,
		arg.Vendedor,
		arg.Nombrevend,
		arg.Cntpedidos,
		arg.Mtopedidos,
		arg.Cntfacturas,
		arg.Mtofacturas,
		arg.Metavend,
		arg.Prcmeta,
		arg.Cntclientes,
		arg.Clivisit,
		arg.Prcvisitas,
		arg.LomMontovtas,
		arg.LomPrcvtas,
		arg.LomPrcvisit,
		arg.RlomMontovtas,
		arg.RlomPrcvtas,
		arg.RlomPrcvisit,
		arg.FechaEstad,
		arg.PpgdolTotneto,
		arg.DevdolTotneto,
		arg.DefdolTotneto,
		arg.Totdolcob,
		arg.Cntrecl,
		arg.Mtorecl,
	)
	return err
}

const getStatisticsById = `-- name: GetStatisticsById :one
select id, codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at, deleted_at
from ke_estadc01
where id = ? and deleted_at is null
`

func (q *Queries) GetStatisticsById(ctx context.Context, id string) (KeEstadc01, error) {
	row := q.db.QueryRowContext(ctx, getStatisticsById, id)
	var i KeEstadc01
	err := row.Scan(
		&i.ID,
		&i.Codcoord,
		&i.Nomcoord,
		&i.Vendedor,
		&i.Nombrevend,
		&i.Cntpedidos,
		&i.Mtopedidos,
		&i.Cntfacturas,
		&i.Mtofacturas,
		&i.Metavend,
		&i.Prcmeta,
		&i.Cntclientes,
		&i.Clivisit,
		&i.Prcvisitas,
		&i.LomMontovtas,
		&i.LomPrcvtas,
		&i.LomPrcvisit,
		&i.RlomMontovtas,
		&i.RlomPrcvtas,
		&i.RlomPrcvisit,
		&i.FechaEstad,
		&i.PpgdolTotneto,
		&i.DevdolTotneto,
		&i.DefdolTotneto,
		&i.Totdolcob,
		&i.Cntrecl,
		&i.Mtorecl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getStatisticsByManager = `-- name: GetStatisticsByManager :many
select id, codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at, deleted_at
from ke_estadc01
where
    codcoord in (select kng_codcoord from ke_nivgcia where kng_codgcia = ?)
    and deleted_at is null
`

func (q *Queries) GetStatisticsByManager(ctx context.Context, kngCodgcia string) ([]KeEstadc01, error) {
	rows, err := q.db.QueryContext(ctx, getStatisticsByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeEstadc01
	for rows.Next() {
		var i KeEstadc01
		if err := rows.Scan(
			&i.ID,
			&i.Codcoord,
			&i.Nomcoord,
			&i.Vendedor,
			&i.Nombrevend,
			&i.Cntpedidos,
			&i.Mtopedidos,
			&i.Cntfacturas,
			&i.Mtofacturas,
			&i.Metavend,
			&i.Prcmeta,
			&i.Cntclientes,
			&i.Clivisit,
			&i.Prcvisitas,
			&i.LomMontovtas,
			&i.LomPrcvtas,
			&i.LomPrcvisit,
			&i.RlomMontovtas,
			&i.RlomPrcvtas,
			&i.RlomPrcvisit,
			&i.FechaEstad,
			&i.PpgdolTotneto,
			&i.DevdolTotneto,
			&i.DefdolTotneto,
			&i.Totdolcob,
			&i.Cntrecl,
			&i.Mtorecl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatisticsBySalesman = `-- name: GetStatisticsBySalesman :many
select id, codcoord, nomcoord, vendedor, nombrevend, cntpedidos, mtopedidos, cntfacturas, mtofacturas, metavend, prcmeta, cntclientes, clivisit, prcvisitas, lom_montovtas, lom_prcvtas, lom_prcvisit, rlom_montovtas, rlom_prcvtas, rlom_prcvisit, fecha_estad, ppgdol_totneto, devdol_totneto, defdol_totneto, totdolcob, cntrecl, mtorecl, created_at, updated_at, deleted_at
from ke_estadc01
where vendedor = ? and deleted_at is null
`

func (q *Queries) GetStatisticsBySalesman(ctx context.Context, vendedor string) ([]KeEstadc01, error) {
	rows, err := q.db.QueryContext(ctx, getStatisticsBySalesman, vendedor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeEstadc01
	for rows.Next() {
		var i KeEstadc01
		if err := rows.Scan(
			&i.ID,
			&i.Codcoord,
			&i.Nomcoord,
			&i.Vendedor,
			&i.Nombrevend,
			&i.Cntpedidos,
			&i.Mtopedidos,
			&i.Cntfacturas,
			&i.Mtofacturas,
			&i.Metavend,
			&i.Prcmeta,
			&i.Cntclientes,
			&i.Clivisit,
			&i.Prcvisitas,
			&i.LomMontovtas,
			&i.LomPrcvtas,
			&i.LomPrcvisit,
			&i.RlomMontovtas,
			&i.RlomPrcvtas,
			&i.RlomPrcvisit,
			&i.FechaEstad,
			&i.PpgdolTotneto,
			&i.DevdolTotneto,
			&i.DefdolTotneto,
			&i.Totdolcob,
			&i.Cntrecl,
			&i.Mtorecl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteStatistic = `-- name: SoftDeleteStatistic :exec
update ke_estadc01
set deleted_at = NOW()
where id = ?
`

func (q *Queries) SoftDeleteStatistic(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, softDeleteStatistic, id)
	return err
}

const updateStatistic = `-- name: UpdateStatistic :exec
update ke_estadc01
set codcoord = ?,
    nomcoord = ?,
    vendedor = ?,
    nombrevend = ?,
    cntpedidos = ?,
    mtopedidos = ?,
    cntfacturas = ?,
    mtofacturas = ?,
    metavend = ?,
    prcmeta = ?,
    cntclientes = ?,
    clivisit = ?,
    prcvisitas = ?,
    lom_montovtas = ?,
    lom_prcvtas = ?,
    lom_prcvisit = ?,
    rlom_montovtas = ?,
    rlom_prcvtas = ?,
    rlom_prcvisit = ?,
    fecha_estad = ?,
    ppgdol_totneto = ?,
    devdol_totneto = ?,
    defdol_totneto = ?,
    totdolcob = ?,
    cntrecl = ?,
    mtorecl = ?,
    updated_at = NOW()
where id = ?
`

type UpdateStatisticParams struct {
	Codcoord      string
	Nomcoord      string
	Vendedor      string
	Nombrevend    string
	Cntpedidos    int32
	Mtopedidos    string
	Cntfacturas   int32
	Mtofacturas   string
	Metavend      string
	Prcmeta       string
	Cntclientes   int32
	Clivisit      int32
	Prcvisitas    string
	LomMontovtas  string
	LomPrcvtas    string
	LomPrcvisit   string
	RlomMontovtas string
	RlomPrcvtas   string
	RlomPrcvisit  string
	FechaEstad    time.Time
	PpgdolTotneto string
	DevdolTotneto string
	DefdolTotneto string
	Totdolcob     string
	Cntrecl       string
	Mtorecl       string
	ID            string
}

func (q *Queries) UpdateStatistic(ctx context.Context, arg UpdateStatisticParams) error {
	_, err := q.db.ExecContext(ctx, updateStatistic,
		arg.Codcoord,
		arg.Nomcoord,
		arg.Vendedor,
		arg.Nombrevend,
		arg.Cntpedidos,
		arg.Mtopedidos,
		arg.Cntfacturas,
		arg.Mtofacturas,
		arg.Metavend,
		arg.Prcmeta,
		arg.Cntclientes,
		arg.Clivisit,
		arg.Prcvisitas,
		arg.LomMontovtas,
		arg.LomPrcvtas,
		arg.LomPrcvisit,
		arg.RlomMontovtas,
		arg.RlomPrcvtas,
		arg.RlomPrcvisit,
		arg.FechaEstad,
		arg.PpgdolTotneto,
		arg.DevdolTotneto,
		arg.DefdolTotneto,
		arg.Totdolcob,
		arg.Cntrecl,
		arg.Mtorecl,
		arg.ID,
	)
	return err
}
