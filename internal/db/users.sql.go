// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const adminGetUserById = `-- name: AdminGetUserById :many
select id, username, password, vendedor_id, cliente_id, role, desactivo, ult_sinc, version, created_at, updated_at, deleted_at
from usuario
where id = ?
`

func (q *Queries) AdminGetUserById(ctx context.Context, id string) ([]Usuario, error) {
	rows, err := q.db.QueryContext(ctx, adminGetUserById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usuario
	for rows.Next() {
		var i Usuario
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.VendedorID,
			&i.ClienteID,
			&i.Role,
			&i.Desactivo,
			&i.UltSinc,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminGetUsers = `-- name: AdminGetUsers :many
select id, username, password, vendedor_id, cliente_id, role, desactivo, ult_sinc, version, created_at, updated_at, deleted_at
from usuario
`

func (q *Queries) AdminGetUsers(ctx context.Context) ([]Usuario, error) {
	rows, err := q.db.QueryContext(ctx, adminGetUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usuario
	for rows.Next() {
		var i Usuario
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.VendedorID,
			&i.ClienteID,
			&i.Role,
			&i.Desactivo,
			&i.UltSinc,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
select id, username, password, vendedor_id, cliente_id, role, desactivo, ult_sinc, version, created_at, updated_at, deleted_at
from usuario
where id = ? and deleted_at is null
`

func (q *Queries) GetUserById(ctx context.Context, id string) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i Usuario
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.VendedorID,
		&i.ClienteID,
		&i.Role,
		&i.Desactivo,
		&i.UltSinc,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
insert into usuario (
    id,
    username,
    password,
    vendedor_id,
    cliente_id,
    role,
    desactivo,
    ult_sinc,
    version,
    created_at,
    updated_at
)
values (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW()
)
`

type InsertUserParams struct {
	ID         string
	Username   string
	Password   sql.NullString
	VendedorID sql.NullString
	ClienteID  sql.NullString
	Role       UsuarioRole
	Desactivo  bool
	UltSinc    time.Time
	Version    string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.VendedorID,
		arg.ClienteID,
		arg.Role,
		arg.Desactivo,
		arg.UltSinc,
		arg.Version,
	)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
update usuario 
set deleted_at = NOW()
where id = ?
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
update usuario
set desactivo = ?,
    ult_sinc = ?,
    version = ?,
    updated_at = NOW()
where id = ?
`

type UpdateUserParams struct {
	Desactivo bool
	UltSinc   time.Time
	Version   string
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Desactivo,
		arg.UltSinc,
		arg.Version,
		arg.ID,
	)
	return err
}
