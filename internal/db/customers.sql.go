// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const adminGetCustomerById = `-- name: AdminGetCustomerById :one
select id, user_id, codigo, nombre, direccion, telefonos, perscont, vendedor, contribespecial, status, sector, subcodigo, precio, email, kne_activa, kne_mtomin, noemifac, noeminota, fchultvta, mtoultvta, prcdpagdia, promdiasp, riesgocrd, cantdocs, totmtodocs, prommtodoc, diasultvta, promdiasvta, limcred, dolarflete, nodolarflete, created_at, updated_at, deleted_at
from cliente
where id = ?
`

func (q *Queries) AdminGetCustomerById(ctx context.Context, id string) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, adminGetCustomerById, id)
	var i Cliente
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Codigo,
		&i.Nombre,
		&i.Direccion,
		&i.Telefonos,
		&i.Perscont,
		&i.Vendedor,
		&i.Contribespecial,
		&i.Status,
		&i.Sector,
		&i.Subcodigo,
		&i.Precio,
		&i.Email,
		&i.KneActiva,
		&i.KneMtomin,
		&i.Noemifac,
		&i.Noeminota,
		&i.Fchultvta,
		&i.Mtoultvta,
		&i.Prcdpagdia,
		&i.Promdiasp,
		&i.Riesgocrd,
		&i.Cantdocs,
		&i.Totmtodocs,
		&i.Prommtodoc,
		&i.Diasultvta,
		&i.Promdiasvta,
		&i.Limcred,
		&i.Dolarflete,
		&i.Nodolarflete,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const adminGetCustomers = `-- name: AdminGetCustomers :many
select id, user_id, codigo, nombre, direccion, telefonos, perscont, vendedor, contribespecial, status, sector, subcodigo, precio, email, kne_activa, kne_mtomin, noemifac, noeminota, fchultvta, mtoultvta, prcdpagdia, promdiasp, riesgocrd, cantdocs, totmtodocs, prommtodoc, diasultvta, promdiasvta, limcred, dolarflete, nodolarflete, created_at, updated_at, deleted_at
from cliente
`

func (q *Queries) AdminGetCustomers(ctx context.Context) ([]Cliente, error) {
	rows, err := q.db.QueryContext(ctx, adminGetCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cliente
	for rows.Next() {
		var i Cliente
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Codigo,
			&i.Nombre,
			&i.Direccion,
			&i.Telefonos,
			&i.Perscont,
			&i.Vendedor,
			&i.Contribespecial,
			&i.Status,
			&i.Sector,
			&i.Subcodigo,
			&i.Precio,
			&i.Email,
			&i.KneActiva,
			&i.KneMtomin,
			&i.Noemifac,
			&i.Noeminota,
			&i.Fchultvta,
			&i.Mtoultvta,
			&i.Prcdpagdia,
			&i.Promdiasp,
			&i.Riesgocrd,
			&i.Cantdocs,
			&i.Totmtodocs,
			&i.Prommtodoc,
			&i.Diasultvta,
			&i.Promdiasvta,
			&i.Limcred,
			&i.Dolarflete,
			&i.Nodolarflete,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO cliente (
    id,
    codigo,
    nombre,
    direccion,
    telefonos,
    perscont,
    vendedor,
    contribespecial,
    status,
    sector,
    subcodigo,
    precio,
    email,
    kne_activa,
    kne_mtomin,
    noemifac,
    noeminota,
    fchultvta,
    mtoultvta,
    prcdpagdia,
    promdiasp,
    riesgocrd,
    cantdocs,
    totmtodocs,
    prommtodoc,
    diasultvta,
    promdiasvta,
    limcred,
    dolarflete,
    nodolarflete,
    created_at,
    updated_at
)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW()
)
`

type CreateCustomerParams struct {
	ID              string
	Codigo          string
	Nombre          string
	Direccion       sql.NullString
	Telefonos       sql.NullString
	Perscont        sql.NullString
	Vendedor        sql.NullString
	Contribespecial bool
	Status          int16
	Sector          sql.NullInt32
	Subcodigo       int32
	Precio          int16
	Email           string
	KneActiva       bool
	KneMtomin       string
	Noemifac        bool
	Noeminota       bool
	Fchultvta       time.Time
	Mtoultvta       string
	Prcdpagdia      string
	Promdiasp       string
	Riesgocrd       string
	Cantdocs        int32
	Totmtodocs      string
	Prommtodoc      string
	Diasultvta      string
	Promdiasvta     string
	Limcred         string
	Dolarflete      bool
	Nodolarflete    bool
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer,
		arg.ID,
		arg.Codigo,
		arg.Nombre,
		arg.Direccion,
		arg.Telefonos,
		arg.Perscont,
		arg.Vendedor,
		arg.Contribespecial,
		arg.Status,
		arg.Sector,
		arg.Subcodigo,
		arg.Precio,
		arg.Email,
		arg.KneActiva,
		arg.KneMtomin,
		arg.Noemifac,
		arg.Noeminota,
		arg.Fchultvta,
		arg.Mtoultvta,
		arg.Prcdpagdia,
		arg.Promdiasp,
		arg.Riesgocrd,
		arg.Cantdocs,
		arg.Totmtodocs,
		arg.Prommtodoc,
		arg.Diasultvta,
		arg.Promdiasvta,
		arg.Limcred,
		arg.Dolarflete,
		arg.Nodolarflete,
	)
	return err
}

const getCustomerById = `-- name: GetCustomerById :one
select id, user_id, codigo, nombre, direccion, telefonos, perscont, vendedor, contribespecial, status, sector, subcodigo, precio, email, kne_activa, kne_mtomin, noemifac, noeminota, fchultvta, mtoultvta, prcdpagdia, promdiasp, riesgocrd, cantdocs, totmtodocs, prommtodoc, diasultvta, promdiasvta, limcred, dolarflete, nodolarflete, created_at, updated_at, deleted_at
from cliente
where id = ? and deleted_at is null
`

func (q *Queries) GetCustomerById(ctx context.Context, id string) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, getCustomerById, id)
	var i Cliente
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Codigo,
		&i.Nombre,
		&i.Direccion,
		&i.Telefonos,
		&i.Perscont,
		&i.Vendedor,
		&i.Contribespecial,
		&i.Status,
		&i.Sector,
		&i.Subcodigo,
		&i.Precio,
		&i.Email,
		&i.KneActiva,
		&i.KneMtomin,
		&i.Noemifac,
		&i.Noeminota,
		&i.Fchultvta,
		&i.Mtoultvta,
		&i.Prcdpagdia,
		&i.Promdiasp,
		&i.Riesgocrd,
		&i.Cantdocs,
		&i.Totmtodocs,
		&i.Prommtodoc,
		&i.Diasultvta,
		&i.Promdiasvta,
		&i.Limcred,
		&i.Dolarflete,
		&i.Nodolarflete,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomersByManager = `-- name: GetCustomersByManager :many
select cliente.id, cliente.user_id, cliente.codigo, cliente.nombre, direccion, telefonos, perscont, vendedor, contribespecial, cliente.status, cliente.sector, cliente.subcodigo, precio, cliente.email, kne_activa, kne_mtomin, noemifac, noeminota, fchultvta, mtoultvta, prcdpagdia, promdiasp, riesgocrd, cantdocs, totmtodocs, prommtodoc, diasultvta, promdiasvta, limcred, dolarflete, nodolarflete, cliente.created_at, cliente.updated_at, cliente.deleted_at, vendedor.id, vendedor.user_id, vendedor.codigo, vendedor.nombre, telefono_1, telefono_2, telefono_movil, vendedor.status, supervpor, vendedor.sector, vendedor.subcodigo, vendedor.email, vendedor.created_at, vendedor.updated_at, vendedor.deleted_at
from cliente
inner join vendedor on cliente.vendedor = vendedor.codigo
where
    vendedor.supervpor in (select kng_codcoord from ke_nivgcia where kng_codgcia = ?)
    and deleted_at is null
`

type GetCustomersByManagerRow struct {
	ID              string
	UserID          sql.NullString
	Codigo          string
	Nombre          string
	Direccion       sql.NullString
	Telefonos       sql.NullString
	Perscont        sql.NullString
	Vendedor        sql.NullString
	Contribespecial bool
	Status          int16
	Sector          sql.NullInt32
	Subcodigo       int32
	Precio          int16
	Email           string
	KneActiva       bool
	KneMtomin       string
	Noemifac        bool
	Noeminota       bool
	Fchultvta       time.Time
	Mtoultvta       string
	Prcdpagdia      string
	Promdiasp       string
	Riesgocrd       string
	Cantdocs        int32
	Totmtodocs      string
	Prommtodoc      string
	Diasultvta      string
	Promdiasvta     string
	Limcred         string
	Dolarflete      bool
	Nodolarflete    bool
	CreatedAt       time.Time
	UpdatedAt       time.Time
	DeletedAt       sql.NullTime
	ID_2            string
	UserID_2        sql.NullString
	Codigo_2        string
	Nombre_2        string
	Telefono1       string
	Telefono2       string
	TelefonoMovil   string
	Status_2        int16
	Supervpor       string
	Sector_2        sql.NullInt32
	Subcodigo_2     int32
	Email_2         string
	CreatedAt_2     time.Time
	UpdatedAt_2     time.Time
	DeletedAt_2     sql.NullTime
}

func (q *Queries) GetCustomersByManager(ctx context.Context, kngCodgcia string) ([]GetCustomersByManagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomersByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersByManagerRow
	for rows.Next() {
		var i GetCustomersByManagerRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Codigo,
			&i.Nombre,
			&i.Direccion,
			&i.Telefonos,
			&i.Perscont,
			&i.Vendedor,
			&i.Contribespecial,
			&i.Status,
			&i.Sector,
			&i.Subcodigo,
			&i.Precio,
			&i.Email,
			&i.KneActiva,
			&i.KneMtomin,
			&i.Noemifac,
			&i.Noeminota,
			&i.Fchultvta,
			&i.Mtoultvta,
			&i.Prcdpagdia,
			&i.Promdiasp,
			&i.Riesgocrd,
			&i.Cantdocs,
			&i.Totmtodocs,
			&i.Prommtodoc,
			&i.Diasultvta,
			&i.Promdiasvta,
			&i.Limcred,
			&i.Dolarflete,
			&i.Nodolarflete,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.UserID_2,
			&i.Codigo_2,
			&i.Nombre_2,
			&i.Telefono1,
			&i.Telefono2,
			&i.TelefonoMovil,
			&i.Status_2,
			&i.Supervpor,
			&i.Sector_2,
			&i.Subcodigo_2,
			&i.Email_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomersBySalesman = `-- name: GetCustomersBySalesman :many
select id, user_id, codigo, nombre, direccion, telefonos, perscont, vendedor, contribespecial, status, sector, subcodigo, precio, email, kne_activa, kne_mtomin, noemifac, noeminota, fchultvta, mtoultvta, prcdpagdia, promdiasp, riesgocrd, cantdocs, totmtodocs, prommtodoc, diasultvta, promdiasvta, limcred, dolarflete, nodolarflete, created_at, updated_at, deleted_at
from cliente
where vendedor = ? and deleted_at is null
`

func (q *Queries) GetCustomersBySalesman(ctx context.Context, vendedor sql.NullString) ([]Cliente, error) {
	rows, err := q.db.QueryContext(ctx, getCustomersBySalesman, vendedor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cliente
	for rows.Next() {
		var i Cliente
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Codigo,
			&i.Nombre,
			&i.Direccion,
			&i.Telefonos,
			&i.Perscont,
			&i.Vendedor,
			&i.Contribespecial,
			&i.Status,
			&i.Sector,
			&i.Subcodigo,
			&i.Precio,
			&i.Email,
			&i.KneActiva,
			&i.KneMtomin,
			&i.Noemifac,
			&i.Noeminota,
			&i.Fchultvta,
			&i.Mtoultvta,
			&i.Prcdpagdia,
			&i.Promdiasp,
			&i.Riesgocrd,
			&i.Cantdocs,
			&i.Totmtodocs,
			&i.Prommtodoc,
			&i.Diasultvta,
			&i.Promdiasvta,
			&i.Limcred,
			&i.Dolarflete,
			&i.Nodolarflete,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteCustomer = `-- name: SoftDeleteCustomer :exec
UPDATE cliente
SET deleted_at = NOW()
WHERE id = ?
`

func (q *Queries) SoftDeleteCustomer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, softDeleteCustomer, id)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE cliente
SET codigo = ?,
    nombre = ?,
    direccion = ?,
    telefonos = ?,
    perscont = ?,
    vendedor = ?,
    contribespecial = ?,
    status = ?,
    sector = ?,
    subcodigo = ?,
    precio = ?,
    email = ?,
    kne_activa = ?,
    kne_mtomin = ?,
    noemifac = ?,
    noeminota = ?,
    fchultvta = ?,
    mtoultvta = ?,
    prcdpagdia = ?,
    promdiasp = ?,
    riesgocrd = ?,
    cantdocs = ?,
    totmtodocs = ?,
    prommtodoc = ?,
    diasultvta = ?,
    promdiasvta = ?,
    limcred = ?,
    dolarflete = ?,
    nodolarflete = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateCustomerParams struct {
	Codigo          string
	Nombre          string
	Direccion       sql.NullString
	Telefonos       sql.NullString
	Perscont        sql.NullString
	Vendedor        sql.NullString
	Contribespecial bool
	Status          int16
	Sector          sql.NullInt32
	Subcodigo       int32
	Precio          int16
	Email           string
	KneActiva       bool
	KneMtomin       string
	Noemifac        bool
	Noeminota       bool
	Fchultvta       time.Time
	Mtoultvta       string
	Prcdpagdia      string
	Promdiasp       string
	Riesgocrd       string
	Cantdocs        int32
	Totmtodocs      string
	Prommtodoc      string
	Diasultvta      string
	Promdiasvta     string
	Limcred         string
	Dolarflete      bool
	Nodolarflete    bool
	ID              string
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.Codigo,
		arg.Nombre,
		arg.Direccion,
		arg.Telefonos,
		arg.Perscont,
		arg.Vendedor,
		arg.Contribespecial,
		arg.Status,
		arg.Sector,
		arg.Subcodigo,
		arg.Precio,
		arg.Email,
		arg.KneActiva,
		arg.KneMtomin,
		arg.Noemifac,
		arg.Noeminota,
		arg.Fchultvta,
		arg.Mtoultvta,
		arg.Prcdpagdia,
		arg.Promdiasp,
		arg.Riesgocrd,
		arg.Cantdocs,
		arg.Totmtodocs,
		arg.Prommtodoc,
		arg.Diasultvta,
		arg.Promdiasvta,
		arg.Limcred,
		arg.Dolarflete,
		arg.Nodolarflete,
		arg.ID,
	)
	return err
}
