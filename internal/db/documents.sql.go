// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const findAllDocuments = `-- name: FindAllDocuments :many
select agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, deleted_at
from ke_doccti
`

func (q *Queries) FindAllDocuments(ctx context.Context) ([]KeDoccti, error) {
	rows, err := q.db.QueryContext(ctx, findAllDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeDoccti
	for rows.Next() {
		var i KeDoccti
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllDocumentsByCode = `-- name: FindAllDocumentsByCode :many
select agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, deleted_at
from ke_doccti
where ke_doccti.vendedor = ?
`

func (q *Queries) FindAllDocumentsByCode(ctx context.Context, vendedor string) ([]KeDoccti, error) {
	rows, err := q.db.QueryContext(ctx, findAllDocumentsByCode, vendedor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeDoccti
	for rows.Next() {
		var i KeDoccti
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllDocumentsWithLines = `-- name: FindAllDocumentsWithLines :many
select ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.documento = ke_doclmv.documento
`

type FindAllDocumentsWithLinesRow struct {
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullString
	Subgrupo       sql.NullString
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) FindAllDocumentsWithLines(ctx context.Context) ([]FindAllDocumentsWithLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllDocumentsWithLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllDocumentsWithLinesRow
	for rows.Next() {
		var i FindAllDocumentsWithLinesRow
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Agencia_2,
			&i.Tipodoc_2,
			&i.Documento_2,
			&i.Tipodocv_2,
			&i.Grupo,
			&i.Subgrupo,
			&i.Origen,
			&i.Codigo,
			&i.Codhijo,
			&i.Pid,
			&i.Nombre,
			&i.Cantidad,
			&i.Cntdevuelt,
			&i.Vndcntdevuelt,
			&i.Dvndmtototal_2,
			&i.Dpreciofin,
			&i.Dpreciounit,
			&i.Dmontoneto,
			&i.Dmontototal,
			&i.Timpueprc,
			&i.Unidevuelt,
			&i.Fechadoc,
			&i.Vendedor_2,
			&i.Codcoord_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllDocumentsWithLinesByCode = `-- name: FindAllDocumentsWithLinesByCode :many
select ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.documento = ke_doclmv.documento
where ke_doccti.vendedor = ?
`

type FindAllDocumentsWithLinesByCodeRow struct {
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullString
	Subgrupo       sql.NullString
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) FindAllDocumentsWithLinesByCode(ctx context.Context, vendedor string) ([]FindAllDocumentsWithLinesByCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllDocumentsWithLinesByCode, vendedor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllDocumentsWithLinesByCodeRow
	for rows.Next() {
		var i FindAllDocumentsWithLinesByCodeRow
		if err := rows.Scan(
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Agencia_2,
			&i.Tipodoc_2,
			&i.Documento_2,
			&i.Tipodocv_2,
			&i.Grupo,
			&i.Subgrupo,
			&i.Origen,
			&i.Codigo,
			&i.Codhijo,
			&i.Pid,
			&i.Nombre,
			&i.Cantidad,
			&i.Cntdevuelt,
			&i.Vndcntdevuelt,
			&i.Dvndmtototal_2,
			&i.Dpreciofin,
			&i.Dpreciounit,
			&i.Dmontoneto,
			&i.Dmontototal,
			&i.Timpueprc,
			&i.Unidevuelt,
			&i.Fechadoc,
			&i.Vendedor_2,
			&i.Codcoord_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
