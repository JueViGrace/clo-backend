// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const adminGetDocumentByCode = `-- name: AdminGetDocumentByCode :one
select id, agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, deleted_at
from ke_doccti
where documento = ?
`

func (q *Queries) AdminGetDocumentByCode(ctx context.Context, documento string) (KeDoccti, error) {
	row := q.db.QueryRowContext(ctx, adminGetDocumentByCode, documento)
	var i KeDoccti
	err := row.Scan(
		&i.ID,
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const adminGetDocumentById = `-- name: AdminGetDocumentById :one
select id, agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, deleted_at
from ke_doccti
where id = ?
`

func (q *Queries) AdminGetDocumentById(ctx context.Context, id string) (KeDoccti, error) {
	row := q.db.QueryRowContext(ctx, adminGetDocumentById, id)
	var i KeDoccti
	err := row.Scan(
		&i.ID,
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const adminGetDocumentWithLinesByCode = `-- name: AdminGetDocumentWithLinesByCode :one
select id, ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, doc_id, articulo_id, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.id = ke_doclmv.doc_id
where ke_doccti.documento = ?
`

type AdminGetDocumentWithLinesByCodeRow struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	DocID          sql.NullString
	ArticuloID     sql.NullString
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullInt32
	Subgrupo       sql.NullInt32
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) AdminGetDocumentWithLinesByCode(ctx context.Context, documento string) (AdminGetDocumentWithLinesByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, adminGetDocumentWithLinesByCode, documento)
	var i AdminGetDocumentWithLinesByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.DocID,
		&i.ArticuloID,
		&i.Agencia_2,
		&i.Tipodoc_2,
		&i.Documento_2,
		&i.Tipodocv_2,
		&i.Grupo,
		&i.Subgrupo,
		&i.Origen,
		&i.Codigo,
		&i.Codhijo,
		&i.Pid,
		&i.Nombre,
		&i.Cantidad,
		&i.Cntdevuelt,
		&i.Vndcntdevuelt,
		&i.Dvndmtototal_2,
		&i.Dpreciofin,
		&i.Dpreciounit,
		&i.Dmontoneto,
		&i.Dmontototal,
		&i.Timpueprc,
		&i.Unidevuelt,
		&i.Fechadoc,
		&i.Vendedor_2,
		&i.Codcoord_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const adminGetDocumentWithLinesById = `-- name: AdminGetDocumentWithLinesById :one
select id, ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, doc_id, articulo_id, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.id = ke_doclmv.doc_id
where ke_doccti.id = ?
`

type AdminGetDocumentWithLinesByIdRow struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	DocID          sql.NullString
	ArticuloID     sql.NullString
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullInt32
	Subgrupo       sql.NullInt32
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) AdminGetDocumentWithLinesById(ctx context.Context, id string) (AdminGetDocumentWithLinesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, adminGetDocumentWithLinesById, id)
	var i AdminGetDocumentWithLinesByIdRow
	err := row.Scan(
		&i.ID,
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.DocID,
		&i.ArticuloID,
		&i.Agencia_2,
		&i.Tipodoc_2,
		&i.Documento_2,
		&i.Tipodocv_2,
		&i.Grupo,
		&i.Subgrupo,
		&i.Origen,
		&i.Codigo,
		&i.Codhijo,
		&i.Pid,
		&i.Nombre,
		&i.Cantidad,
		&i.Cntdevuelt,
		&i.Vndcntdevuelt,
		&i.Dvndmtototal_2,
		&i.Dpreciofin,
		&i.Dpreciounit,
		&i.Dmontoneto,
		&i.Dmontototal,
		&i.Timpueprc,
		&i.Unidevuelt,
		&i.Fechadoc,
		&i.Vendedor_2,
		&i.Codcoord_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const adminGetDocuments = `-- name: AdminGetDocuments :many
select id, agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, deleted_at
from ke_doccti
`

func (q *Queries) AdminGetDocuments(ctx context.Context) ([]KeDoccti, error) {
	rows, err := q.db.QueryContext(ctx, adminGetDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeDoccti
	for rows.Next() {
		var i KeDoccti
		if err := rows.Scan(
			&i.ID,
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminGetDocumentsWithLines = `-- name: AdminGetDocumentsWithLines :many
select id, ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, doc_id, articulo_id, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.id = ke_doclmv.doc_id
`

type AdminGetDocumentsWithLinesRow struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	DocID          sql.NullString
	ArticuloID     sql.NullString
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullInt32
	Subgrupo       sql.NullInt32
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) AdminGetDocumentsWithLines(ctx context.Context) ([]AdminGetDocumentsWithLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, adminGetDocumentsWithLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminGetDocumentsWithLinesRow
	for rows.Next() {
		var i AdminGetDocumentsWithLinesRow
		if err := rows.Scan(
			&i.ID,
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.DocID,
			&i.ArticuloID,
			&i.Agencia_2,
			&i.Tipodoc_2,
			&i.Documento_2,
			&i.Tipodocv_2,
			&i.Grupo,
			&i.Subgrupo,
			&i.Origen,
			&i.Codigo,
			&i.Codhijo,
			&i.Pid,
			&i.Nombre,
			&i.Cantidad,
			&i.Cntdevuelt,
			&i.Vndcntdevuelt,
			&i.Dvndmtototal_2,
			&i.Dpreciofin,
			&i.Dpreciounit,
			&i.Dmontoneto,
			&i.Dmontototal,
			&i.Timpueprc,
			&i.Unidevuelt,
			&i.Fechadoc,
			&i.Vendedor_2,
			&i.Codcoord_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createDocument = `-- name: CreateDocument :exec
insert into ke_doccti (
    id,
    agencia,
    tipodoc,
    documento,
    tipodocv,
    codcliente,
    nombrecli,
    contribesp,
    ruta_parme,
    tipoprecio,
    emision,
    recepcion,
    vence,
    diascred,
    estatusdoc,
    dtotneto,
    dtotimpuest,
    dtotalfinal,
    dtotpagos,
    dtotdescuen,
    dFlete,
    dtotdev,
    dvndmtototal,
    dretencion,
    dretencioniva,
    vendedor,
    codcoord,
    aceptadev,
    kti_negesp,
    bsiva,
    bsflete,
    bsretencion,
    bsretencioniva,
    tasadoc,
    mtodcto,
    fchvencedcto,
    tienedcto,
    cbsret,
    cdret,
    cbsretiva,
    cdretiva,
    cbsrparme,
    cdrparme,
    cbsretflete,
    cdretflete,
    bsmtoiva,
    bsmtofte,
    retmun_mto,
    dolarflete,
    bsretflete,
    dretflete,
    dretmun_mto,
    retivaoblig,
    edoentrega,
    dmtoiva,
    prcdctoaplic,
    montodctodol,
    montodctobs,
    created_at,
    updated_at
)
values (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW()
)
`

type CreateDocumentParams struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) error {
	_, err := q.db.ExecContext(ctx, createDocument,
		arg.ID,
		arg.Agencia,
		arg.Tipodoc,
		arg.Documento,
		arg.Tipodocv,
		arg.Codcliente,
		arg.Nombrecli,
		arg.Contribesp,
		arg.RutaParme,
		arg.Tipoprecio,
		arg.Emision,
		arg.Recepcion,
		arg.Vence,
		arg.Diascred,
		arg.Estatusdoc,
		arg.Dtotneto,
		arg.Dtotimpuest,
		arg.Dtotalfinal,
		arg.Dtotpagos,
		arg.Dtotdescuen,
		arg.Dflete,
		arg.Dtotdev,
		arg.Dvndmtototal,
		arg.Dretencion,
		arg.Dretencioniva,
		arg.Vendedor,
		arg.Codcoord,
		arg.Aceptadev,
		arg.KtiNegesp,
		arg.Bsiva,
		arg.Bsflete,
		arg.Bsretencion,
		arg.Bsretencioniva,
		arg.Tasadoc,
		arg.Mtodcto,
		arg.Fchvencedcto,
		arg.Tienedcto,
		arg.Cbsret,
		arg.Cdret,
		arg.Cbsretiva,
		arg.Cdretiva,
		arg.Cbsrparme,
		arg.Cdrparme,
		arg.Cbsretflete,
		arg.Cdretflete,
		arg.Bsmtoiva,
		arg.Bsmtofte,
		arg.RetmunMto,
		arg.Dolarflete,
		arg.Bsretflete,
		arg.Dretflete,
		arg.DretmunMto,
		arg.Retivaoblig,
		arg.Edoentrega,
		arg.Dmtoiva,
		arg.Prcdctoaplic,
		arg.Montodctodol,
		arg.Montodctobs,
	)
	return err
}

const createDocumentLines = `-- name: CreateDocumentLines :exec
insert into ke_doclmv (
    doc_id,
    articulo_id,
    agencia,
    tipodoc,
    documento,
    tipodocv,
    grupo,
    subgrupo,
    origen,
    codigo,
    codhijo,
    pid,
    nombre,
    cantidad,
    cntdevuelt,
    vndcntdevuelt,
    dvndmtototal,
    dpreciofin,
    dpreciounit,
    dmontoneto,
    dmontototal,
    timpueprc,
    unidevuelt,
    fechadoc,
    vendedor,
    codcoord,
    created_at,
    updated_at
)
values(
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW()
)
`

type CreateDocumentLinesParams struct {
	DocID         string
	ArticuloID    string
	Agencia       string
	Tipodoc       string
	Documento     string
	Tipodocv      string
	Grupo         int32
	Subgrupo      int32
	Origen        string
	Codigo        string
	Codhijo       string
	Pid           string
	Nombre        string
	Cantidad      int32
	Cntdevuelt    int32
	Vndcntdevuelt string
	Dvndmtototal  string
	Dpreciofin    string
	Dpreciounit   string
	Dmontoneto    string
	Dmontototal   string
	Timpueprc     string
	Unidevuelt    int32
	Fechadoc      time.Time
	Vendedor      string
	Codcoord      string
}

func (q *Queries) CreateDocumentLines(ctx context.Context, arg CreateDocumentLinesParams) error {
	_, err := q.db.ExecContext(ctx, createDocumentLines,
		arg.DocID,
		arg.ArticuloID,
		arg.Agencia,
		arg.Tipodoc,
		arg.Documento,
		arg.Tipodocv,
		arg.Grupo,
		arg.Subgrupo,
		arg.Origen,
		arg.Codigo,
		arg.Codhijo,
		arg.Pid,
		arg.Nombre,
		arg.Cantidad,
		arg.Cntdevuelt,
		arg.Vndcntdevuelt,
		arg.Dvndmtototal,
		arg.Dpreciofin,
		arg.Dpreciounit,
		arg.Dmontoneto,
		arg.Dmontototal,
		arg.Timpueprc,
		arg.Unidevuelt,
		arg.Fechadoc,
		arg.Vendedor,
		arg.Codcoord,
	)
	return err
}

const getDocumentByCode = `-- name: GetDocumentByCode :one
select id, agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, deleted_at
from ke_doccti
where ke_doccti.documento = ? and deleted_at is null
`

func (q *Queries) GetDocumentByCode(ctx context.Context, documento string) (KeDoccti, error) {
	row := q.db.QueryRowContext(ctx, getDocumentByCode, documento)
	var i KeDoccti
	err := row.Scan(
		&i.ID,
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDocumentById = `-- name: GetDocumentById :one
select id, agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, deleted_at
from ke_doccti
where id = ? and deleted_at is null
`

func (q *Queries) GetDocumentById(ctx context.Context, id string) (KeDoccti, error) {
	row := q.db.QueryRowContext(ctx, getDocumentById, id)
	var i KeDoccti
	err := row.Scan(
		&i.ID,
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDocumentWithLinesByCode = `-- name: GetDocumentWithLinesByCode :one
select id, ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, doc_id, articulo_id, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.id = ke_doclmv.doc_id
where ke_doccti.documento = ? and deleted_at is null
`

type GetDocumentWithLinesByCodeRow struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	DocID          sql.NullString
	ArticuloID     sql.NullString
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullInt32
	Subgrupo       sql.NullInt32
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) GetDocumentWithLinesByCode(ctx context.Context, documento string) (GetDocumentWithLinesByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getDocumentWithLinesByCode, documento)
	var i GetDocumentWithLinesByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.DocID,
		&i.ArticuloID,
		&i.Agencia_2,
		&i.Tipodoc_2,
		&i.Documento_2,
		&i.Tipodocv_2,
		&i.Grupo,
		&i.Subgrupo,
		&i.Origen,
		&i.Codigo,
		&i.Codhijo,
		&i.Pid,
		&i.Nombre,
		&i.Cantidad,
		&i.Cntdevuelt,
		&i.Vndcntdevuelt,
		&i.Dvndmtototal_2,
		&i.Dpreciofin,
		&i.Dpreciounit,
		&i.Dmontoneto,
		&i.Dmontototal,
		&i.Timpueprc,
		&i.Unidevuelt,
		&i.Fechadoc,
		&i.Vendedor_2,
		&i.Codcoord_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const getDocumentWithLinesById = `-- name: GetDocumentWithLinesById :one
select id, ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, doc_id, articulo_id, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.id = ke_doclmv.doc_id
where ke_doccti.id = ? and deleted_at is null
`

type GetDocumentWithLinesByIdRow struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	DocID          sql.NullString
	ArticuloID     sql.NullString
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullInt32
	Subgrupo       sql.NullInt32
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) GetDocumentWithLinesById(ctx context.Context, id string) (GetDocumentWithLinesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getDocumentWithLinesById, id)
	var i GetDocumentWithLinesByIdRow
	err := row.Scan(
		&i.ID,
		&i.Agencia,
		&i.Tipodoc,
		&i.Documento,
		&i.Tipodocv,
		&i.Codcliente,
		&i.Nombrecli,
		&i.Contribesp,
		&i.RutaParme,
		&i.Tipoprecio,
		&i.Emision,
		&i.Recepcion,
		&i.Vence,
		&i.Diascred,
		&i.Estatusdoc,
		&i.Dtotneto,
		&i.Dtotimpuest,
		&i.Dtotalfinal,
		&i.Dtotpagos,
		&i.Dtotdescuen,
		&i.Dflete,
		&i.Dtotdev,
		&i.Dvndmtototal,
		&i.Dretencion,
		&i.Dretencioniva,
		&i.Vendedor,
		&i.Codcoord,
		&i.Aceptadev,
		&i.KtiNegesp,
		&i.Bsiva,
		&i.Bsflete,
		&i.Bsretencion,
		&i.Bsretencioniva,
		&i.Tasadoc,
		&i.Mtodcto,
		&i.Fchvencedcto,
		&i.Tienedcto,
		&i.Cbsret,
		&i.Cdret,
		&i.Cbsretiva,
		&i.Cdretiva,
		&i.Cbsrparme,
		&i.Cdrparme,
		&i.Cbsretflete,
		&i.Cdretflete,
		&i.Bsmtoiva,
		&i.Bsmtofte,
		&i.RetmunMto,
		&i.Dolarflete,
		&i.Bsretflete,
		&i.Dretflete,
		&i.DretmunMto,
		&i.Retivaoblig,
		&i.Edoentrega,
		&i.Dmtoiva,
		&i.Prcdctoaplic,
		&i.Montodctodol,
		&i.Montodctobs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.DocID,
		&i.ArticuloID,
		&i.Agencia_2,
		&i.Tipodoc_2,
		&i.Documento_2,
		&i.Tipodocv_2,
		&i.Grupo,
		&i.Subgrupo,
		&i.Origen,
		&i.Codigo,
		&i.Codhijo,
		&i.Pid,
		&i.Nombre,
		&i.Cantidad,
		&i.Cntdevuelt,
		&i.Vndcntdevuelt,
		&i.Dvndmtototal_2,
		&i.Dpreciofin,
		&i.Dpreciounit,
		&i.Dmontoneto,
		&i.Dmontototal,
		&i.Timpueprc,
		&i.Unidevuelt,
		&i.Fechadoc,
		&i.Vendedor_2,
		&i.Codcoord_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const getDocumentsByManager = `-- name: GetDocumentsByManager :many
select ke_doccti.id, agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, vendedor.id, user_id, codigo, nombre, telefono_1, telefono_2, telefono_movil, status, supervpor, sector, subcodigo, email, vendedor.created_at, vendedor.updated_at, vendedor.deleted_at
from ke_doccti
left join vendedor on vendedor.codigo = ke_doccti.vendedor
where
    ke_doccti.codcoord in (select kng_codcoord from ke_nivgcia where kng_codgcia = ?)
    and deleted_at is null
`

type GetDocumentsByManagerRow struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	ID_2           sql.NullString
	UserID         sql.NullString
	Codigo         sql.NullString
	Nombre         sql.NullString
	Telefono1      sql.NullString
	Telefono2      sql.NullString
	TelefonoMovil  sql.NullString
	Status         sql.NullInt16
	Supervpor      sql.NullString
	Sector         sql.NullInt32
	Subcodigo      sql.NullInt32
	Email          sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) GetDocumentsByManager(ctx context.Context, kngCodgcia string) ([]GetDocumentsByManagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDocumentsByManagerRow
	for rows.Next() {
		var i GetDocumentsByManagerRow
		if err := rows.Scan(
			&i.ID,
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.UserID,
			&i.Codigo,
			&i.Nombre,
			&i.Telefono1,
			&i.Telefono2,
			&i.TelefonoMovil,
			&i.Status,
			&i.Supervpor,
			&i.Sector,
			&i.Subcodigo,
			&i.Email,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsBySalesman = `-- name: GetDocumentsBySalesman :many
select id, agencia, tipodoc, documento, tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, dvndmtototal, dretencion, dretencioniva, vendedor, codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, created_at, updated_at, deleted_at
from ke_doccti
where vendedor = ? and deleted_at is null
`

func (q *Queries) GetDocumentsBySalesman(ctx context.Context, vendedor string) ([]KeDoccti, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsBySalesman, vendedor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeDoccti
	for rows.Next() {
		var i KeDoccti
		if err := rows.Scan(
			&i.ID,
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsWithLinesByManager = `-- name: GetDocumentsWithLinesByManager :many
select ke_doccti.id, ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, doc_id, articulo_id, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, ke_doclmv.codigo, codhijo, pid, ke_doclmv.nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at, vendedor.id, user_id, vendedor.codigo, vendedor.nombre, telefono_1, telefono_2, telefono_movil, status, supervpor, sector, subcodigo, email, vendedor.created_at, vendedor.updated_at, vendedor.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.id = ke_doclmv.doc_id
left join vendedor on vendedor.codigo = ke_doccti.vendedor
where
    ke_doccti.codcoord in (select kng_codcoord from ke_nivgcia where kng_codgcia = ?)
    and deleted_at is null
`

type GetDocumentsWithLinesByManagerRow struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	DocID          sql.NullString
	ArticuloID     sql.NullString
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullInt32
	Subgrupo       sql.NullInt32
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
	ID_2           sql.NullString
	UserID         sql.NullString
	Codigo_2       sql.NullString
	Nombre_2       sql.NullString
	Telefono1      sql.NullString
	Telefono2      sql.NullString
	TelefonoMovil  sql.NullString
	Status         sql.NullInt16
	Supervpor      sql.NullString
	Sector         sql.NullInt32
	Subcodigo      sql.NullInt32
	Email          sql.NullString
	CreatedAt_3    sql.NullTime
	UpdatedAt_3    sql.NullTime
	DeletedAt_3    sql.NullTime
}

func (q *Queries) GetDocumentsWithLinesByManager(ctx context.Context, kngCodgcia string) ([]GetDocumentsWithLinesByManagerRow, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsWithLinesByManager, kngCodgcia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDocumentsWithLinesByManagerRow
	for rows.Next() {
		var i GetDocumentsWithLinesByManagerRow
		if err := rows.Scan(
			&i.ID,
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.DocID,
			&i.ArticuloID,
			&i.Agencia_2,
			&i.Tipodoc_2,
			&i.Documento_2,
			&i.Tipodocv_2,
			&i.Grupo,
			&i.Subgrupo,
			&i.Origen,
			&i.Codigo,
			&i.Codhijo,
			&i.Pid,
			&i.Nombre,
			&i.Cantidad,
			&i.Cntdevuelt,
			&i.Vndcntdevuelt,
			&i.Dvndmtototal_2,
			&i.Dpreciofin,
			&i.Dpreciounit,
			&i.Dmontoneto,
			&i.Dmontototal,
			&i.Timpueprc,
			&i.Unidevuelt,
			&i.Fechadoc,
			&i.Vendedor_2,
			&i.Codcoord_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
			&i.ID_2,
			&i.UserID,
			&i.Codigo_2,
			&i.Nombre_2,
			&i.Telefono1,
			&i.Telefono2,
			&i.TelefonoMovil,
			&i.Status,
			&i.Supervpor,
			&i.Sector,
			&i.Subcodigo,
			&i.Email,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.DeletedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsWithLinesBySalesman = `-- name: GetDocumentsWithLinesBySalesman :many
select id, ke_doccti.agencia, ke_doccti.tipodoc, ke_doccti.documento, ke_doccti.tipodocv, codcliente, nombrecli, contribesp, ruta_parme, tipoprecio, emision, recepcion, vence, diascred, estatusdoc, dtotneto, dtotimpuest, dtotalfinal, dtotpagos, dtotdescuen, dflete, dtotdev, ke_doccti.dvndmtototal, dretencion, dretencioniva, ke_doccti.vendedor, ke_doccti.codcoord, aceptadev, kti_negesp, bsiva, bsflete, bsretencion, bsretencioniva, tasadoc, mtodcto, fchvencedcto, tienedcto, cbsret, cdret, cbsretiva, cdretiva, cbsrparme, cdrparme, cbsretflete, cdretflete, bsmtoiva, bsmtofte, retmun_mto, dolarflete, bsretflete, dretflete, dretmun_mto, retivaoblig, edoentrega, dmtoiva, prcdctoaplic, montodctodol, montodctobs, ke_doccti.created_at, ke_doccti.updated_at, ke_doccti.deleted_at, doc_id, articulo_id, ke_doclmv.agencia, ke_doclmv.tipodoc, ke_doclmv.documento, ke_doclmv.tipodocv, grupo, subgrupo, origen, codigo, codhijo, pid, nombre, cantidad, cntdevuelt, vndcntdevuelt, ke_doclmv.dvndmtototal, dpreciofin, dpreciounit, dmontoneto, dmontototal, timpueprc, unidevuelt, fechadoc, ke_doclmv.vendedor, ke_doclmv.codcoord, ke_doclmv.created_at, ke_doclmv.updated_at, ke_doclmv.deleted_at
from ke_doccti
left join ke_doclmv on ke_doccti.id = ke_doclmv.doc_id
where ke_doccti.vendedor = ?
`

type GetDocumentsWithLinesBySalesmanRow struct {
	ID             string
	Agencia        string
	Tipodoc        string
	Documento      string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	DocID          sql.NullString
	ArticuloID     sql.NullString
	Agencia_2      sql.NullString
	Tipodoc_2      sql.NullString
	Documento_2    sql.NullString
	Tipodocv_2     sql.NullString
	Grupo          sql.NullInt32
	Subgrupo       sql.NullInt32
	Origen         sql.NullString
	Codigo         sql.NullString
	Codhijo        sql.NullString
	Pid            sql.NullString
	Nombre         sql.NullString
	Cantidad       sql.NullInt32
	Cntdevuelt     sql.NullInt32
	Vndcntdevuelt  sql.NullString
	Dvndmtototal_2 sql.NullString
	Dpreciofin     sql.NullString
	Dpreciounit    sql.NullString
	Dmontoneto     sql.NullString
	Dmontototal    sql.NullString
	Timpueprc      sql.NullString
	Unidevuelt     sql.NullInt32
	Fechadoc       sql.NullTime
	Vendedor_2     sql.NullString
	Codcoord_2     sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	DeletedAt_2    sql.NullTime
}

func (q *Queries) GetDocumentsWithLinesBySalesman(ctx context.Context, vendedor string) ([]GetDocumentsWithLinesBySalesmanRow, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsWithLinesBySalesman, vendedor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDocumentsWithLinesBySalesmanRow
	for rows.Next() {
		var i GetDocumentsWithLinesBySalesmanRow
		if err := rows.Scan(
			&i.ID,
			&i.Agencia,
			&i.Tipodoc,
			&i.Documento,
			&i.Tipodocv,
			&i.Codcliente,
			&i.Nombrecli,
			&i.Contribesp,
			&i.RutaParme,
			&i.Tipoprecio,
			&i.Emision,
			&i.Recepcion,
			&i.Vence,
			&i.Diascred,
			&i.Estatusdoc,
			&i.Dtotneto,
			&i.Dtotimpuest,
			&i.Dtotalfinal,
			&i.Dtotpagos,
			&i.Dtotdescuen,
			&i.Dflete,
			&i.Dtotdev,
			&i.Dvndmtototal,
			&i.Dretencion,
			&i.Dretencioniva,
			&i.Vendedor,
			&i.Codcoord,
			&i.Aceptadev,
			&i.KtiNegesp,
			&i.Bsiva,
			&i.Bsflete,
			&i.Bsretencion,
			&i.Bsretencioniva,
			&i.Tasadoc,
			&i.Mtodcto,
			&i.Fchvencedcto,
			&i.Tienedcto,
			&i.Cbsret,
			&i.Cdret,
			&i.Cbsretiva,
			&i.Cdretiva,
			&i.Cbsrparme,
			&i.Cdrparme,
			&i.Cbsretflete,
			&i.Cdretflete,
			&i.Bsmtoiva,
			&i.Bsmtofte,
			&i.RetmunMto,
			&i.Dolarflete,
			&i.Bsretflete,
			&i.Dretflete,
			&i.DretmunMto,
			&i.Retivaoblig,
			&i.Edoentrega,
			&i.Dmtoiva,
			&i.Prcdctoaplic,
			&i.Montodctodol,
			&i.Montodctobs,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.DocID,
			&i.ArticuloID,
			&i.Agencia_2,
			&i.Tipodoc_2,
			&i.Documento_2,
			&i.Tipodocv_2,
			&i.Grupo,
			&i.Subgrupo,
			&i.Origen,
			&i.Codigo,
			&i.Codhijo,
			&i.Pid,
			&i.Nombre,
			&i.Cantidad,
			&i.Cntdevuelt,
			&i.Vndcntdevuelt,
			&i.Dvndmtototal_2,
			&i.Dpreciofin,
			&i.Dpreciounit,
			&i.Dmontoneto,
			&i.Dmontototal,
			&i.Timpueprc,
			&i.Unidevuelt,
			&i.Fechadoc,
			&i.Vendedor_2,
			&i.Codcoord_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteDocument = `-- name: SoftDeleteDocument :exec
update ke_doccti
set deleted_at = NOW()
where id = ?
`

func (q *Queries) SoftDeleteDocument(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, softDeleteDocument, id)
	return err
}

const softDeleteDocumentLines = `-- name: SoftDeleteDocumentLines :exec
update ke_doclmv
set deleted_at = NOW()
where doc_id = ?
`

func (q *Queries) SoftDeleteDocumentLines(ctx context.Context, docID string) error {
	_, err := q.db.ExecContext(ctx, softDeleteDocumentLines, docID)
	return err
}

const updateDocument = `-- name: UpdateDocument :exec
update ke_doccti
set agencia = ?,
    tipodoc = ?,
    tipodocv = ?,
    codcliente = ?,
    nombrecli = ?,
    contribesp = ?,
    ruta_parme = ?,
    tipoprecio = ?,
    emision = ?,
    recepcion = ?,
    vence = ?,
    diascred = ?,
    estatusdoc = ?,
    dtotneto = ?,
    dtotimpuest = ?,
    dtotalfinal = ?,
    dtotpagos = ?,
    dtotdescuen = ?,
    dFlete = ?,
    dtotdev = ?,
    dvndmtototal = ?,
    dretencion = ?,
    dretencioniva = ?,
    vendedor = ?,
    codcoord = ?,
    aceptadev = ?,
    kti_negesp = ?,
    bsiva = ?,
    bsflete = ?,
    bsretencion = ?,
    bsretencioniva = ?,
    tasadoc = ?,
    mtodcto = ?,
    fchvencedcto = ?,
    tienedcto = ?,
    cbsret = ?,
    cdret = ?,
    cbsretiva = ?,
    cdretiva = ?,
    cbsrparme = ?,
    cdrparme = ?,
    cbsretflete = ?,
    cdretflete = ?,
    bsmtoiva = ?,
    bsmtofte = ?,
    retmun_mto = ?,
    dolarflete = ?,
    bsretflete = ?,
    dretflete = ?,
    dretmun_mto = ?,
    retivaoblig = ?,
    edoentrega = ?,
    dmtoiva = ?,
    prcdctoaplic = ?,
    montodctodol = ?,
    montodctobs = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateDocumentParams struct {
	Agencia        string
	Tipodoc        string
	Tipodocv       string
	Codcliente     string
	Nombrecli      string
	Contribesp     bool
	RutaParme      bool
	Tipoprecio     string
	Emision        time.Time
	Recepcion      time.Time
	Vence          time.Time
	Diascred       string
	Estatusdoc     string
	Dtotneto       string
	Dtotimpuest    string
	Dtotalfinal    string
	Dtotpagos      string
	Dtotdescuen    string
	Dflete         string
	Dtotdev        string
	Dvndmtototal   string
	Dretencion     string
	Dretencioniva  string
	Vendedor       string
	Codcoord       string
	Aceptadev      bool
	KtiNegesp      bool
	Bsiva          string
	Bsflete        string
	Bsretencion    string
	Bsretencioniva string
	Tasadoc        string
	Mtodcto        string
	Fchvencedcto   time.Time
	Tienedcto      bool
	Cbsret         string
	Cdret          string
	Cbsretiva      string
	Cdretiva       string
	Cbsrparme      string
	Cdrparme       string
	Cbsretflete    string
	Cdretflete     string
	Bsmtoiva       string
	Bsmtofte       string
	RetmunMto      string
	Dolarflete     bool
	Bsretflete     string
	Dretflete      string
	DretmunMto     string
	Retivaoblig    bool
	Edoentrega     bool
	Dmtoiva        string
	Prcdctoaplic   string
	Montodctodol   string
	Montodctobs    string
	ID             string
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) error {
	_, err := q.db.ExecContext(ctx, updateDocument,
		arg.Agencia,
		arg.Tipodoc,
		arg.Tipodocv,
		arg.Codcliente,
		arg.Nombrecli,
		arg.Contribesp,
		arg.RutaParme,
		arg.Tipoprecio,
		arg.Emision,
		arg.Recepcion,
		arg.Vence,
		arg.Diascred,
		arg.Estatusdoc,
		arg.Dtotneto,
		arg.Dtotimpuest,
		arg.Dtotalfinal,
		arg.Dtotpagos,
		arg.Dtotdescuen,
		arg.Dflete,
		arg.Dtotdev,
		arg.Dvndmtototal,
		arg.Dretencion,
		arg.Dretencioniva,
		arg.Vendedor,
		arg.Codcoord,
		arg.Aceptadev,
		arg.KtiNegesp,
		arg.Bsiva,
		arg.Bsflete,
		arg.Bsretencion,
		arg.Bsretencioniva,
		arg.Tasadoc,
		arg.Mtodcto,
		arg.Fchvencedcto,
		arg.Tienedcto,
		arg.Cbsret,
		arg.Cdret,
		arg.Cbsretiva,
		arg.Cdretiva,
		arg.Cbsrparme,
		arg.Cdrparme,
		arg.Cbsretflete,
		arg.Cdretflete,
		arg.Bsmtoiva,
		arg.Bsmtofte,
		arg.RetmunMto,
		arg.Dolarflete,
		arg.Bsretflete,
		arg.Dretflete,
		arg.DretmunMto,
		arg.Retivaoblig,
		arg.Edoentrega,
		arg.Dmtoiva,
		arg.Prcdctoaplic,
		arg.Montodctodol,
		arg.Montodctobs,
		arg.ID,
	)
	return err
}

const updateDocumentLines = `-- name: UpdateDocumentLines :exec
update ke_doclmv
set agencia = ?,
    tipodoc = ?,
    tipodocv = ?,
    grupo = ?,
    subgrupo = ?,
    origen = ?,
    codhijo = ?,
    pid = ?,
    nombre = ?,
    cantidad = ?,
    cntdevuelt = ?,
    vndcntdevuelt = ?,
    dvndmtototal = ?,
    dpreciofin = ?,
    dpreciounit = ?,
    dmontoneto = ?,
    dmontototal = ?,
    timpueprc = ?,
    unidevuelt = ?,
    fechadoc = ?,
    vendedor = ?,
    codcoord = ?,
    updated_at = ?
WHERE doc_id = ? and articulo_id = ?
`

type UpdateDocumentLinesParams struct {
	Agencia       string
	Tipodoc       string
	Tipodocv      string
	Grupo         int32
	Subgrupo      int32
	Origen        string
	Codhijo       string
	Pid           string
	Nombre        string
	Cantidad      int32
	Cntdevuelt    int32
	Vndcntdevuelt string
	Dvndmtototal  string
	Dpreciofin    string
	Dpreciounit   string
	Dmontoneto    string
	Dmontototal   string
	Timpueprc     string
	Unidevuelt    int32
	Fechadoc      time.Time
	Vendedor      string
	Codcoord      string
	UpdatedAt     time.Time
	DocID         string
	ArticuloID    string
}

func (q *Queries) UpdateDocumentLines(ctx context.Context, arg UpdateDocumentLinesParams) error {
	_, err := q.db.ExecContext(ctx, updateDocumentLines,
		arg.Agencia,
		arg.Tipodoc,
		arg.Tipodocv,
		arg.Grupo,
		arg.Subgrupo,
		arg.Origen,
		arg.Codhijo,
		arg.Pid,
		arg.Nombre,
		arg.Cantidad,
		arg.Cntdevuelt,
		arg.Vndcntdevuelt,
		arg.Dvndmtototal,
		arg.Dpreciofin,
		arg.Dpreciounit,
		arg.Dmontoneto,
		arg.Dmontototal,
		arg.Timpueprc,
		arg.Unidevuelt,
		arg.Fechadoc,
		arg.Vendedor,
		arg.Codcoord,
		arg.UpdatedAt,
		arg.DocID,
		arg.ArticuloID,
	)
	return err
}
